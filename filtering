window.addEventListener('load', function () {
    // 監視対象の親要素を取得します
    const parentNode = document.body;  // 親要素が見つからない場合、全体のボディを監視

    // オプション設定
    const config = { childList: true, subtree: true };
    var data_loaded = false;

    // コールバック関数
    const callback = function(mutationsList, observer) {
        for (let mutation of mutationsList) {
            if (mutation.type === 'childList') {
                // 追加された要素が指定したクラスを持つかどうかを確認
                mutation.addedNodes.forEach(node => {
                    if (node.nodeType === 1 && node.matches('body > div:nth-child(13) > div > div:nth-child(1) > table')) {
                        if (data_loaded) {
                            return;
                        }
                        runAdditionalProcess();
                        observer.disconnect(); // 監視を停止
                        return;
                    }
                });
            }
        }
    };

    // オブザーバーインスタンスを生成
    const observer = new MutationObserver(callback);

    // 監視を開始
    observer.observe(parentNode, config);

    // フォーム構築完了後に実行したい処理
    function runAdditionalProcess() {
        data_loaded = true;
        // 「種類」ドロップダウンの要素を取得
        const typeDropdown = document.querySelector('[field-id="種類"] .kb-field-value.kb-dropdown');
        
        // 「サイズ」リストのtable要素を取得
        const sizeTable = document.querySelector('body > div:nth-child(13) > div > div:nth-child(1) > table');
        
        // イベントリスナーを追加して絞り込み
        if (typeDropdown && sizeTable) {
          typeDropdown.addEventListener('change', (event) => {
            const selectedType = event.target.value; // 「種類」で選ばれた値
            
            // フィルタリング処理
            const rows = Array.from(sizeTable.querySelectorAll('tr'));
            rows.forEach(row => {
              const sizeCell = row.querySelector('td');
              const sizeValue = sizeCell ? sizeCell.textContent : '';
              if (shouldDisplaySize(selectedType, sizeValue)) {
                  row.style.display = ''; // 表示
              } else {
                  row.style.display = 'none'; // 非表示
              }
            });
          });
        } else {
          console.error('対象の要素が見つかりませんでした！');
        }
    }

    // 表示条件を定義する関数
    function shouldDisplaySize(type, size) {
        const filterMap = {
            '保護着': ['S', 'M', 'L'],
            '作業服': ['XS', 'M', 'XL']
        };
        return filterMap[type]?.includes(size);
    }
});
