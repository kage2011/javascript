window.addEventListener('load', function () {
    // 監視対象の親要素を取得します
    const parentNode = document.body;  // 親要素が見つからない場合、全体のボディを監視

    // オプション設定
    const config = { childList: true, subtree: true };
    var data_loaded = false;
    // コールバック関数
    const callback = function(mutationsList, observer) {
        for (let mutation of mutationsList) {
            if (mutation.type === 'childList') {
                // 追加された要素が指定したクラスを持つかどうかを確認
                mutation.addedNodes.forEach(node => {
                    if (node.nodeType === 3)  {
                        if (data_loaded) {
                            return;
                        }
                        runAdditionalProcess();
                        observer.disconnect(); // 監視を停止
                        return;
                    }
                });
            }
        }
    };

    // オブザーバーインスタンスを生成
    const observer = new MutationObserver(callback);

    // 監視を開始
    observer.observe(parentNode, config);

    // フォーム構築完了後に実行したい処理
    function runAdditionalProcess() {
        data_loaded = true;
        // 「種類」ドロップダウンの要素を取得
        const typeDropdown = document.querySelector('[field-id="種類"] .kb-field-value.kb-dropdown');
        
        // 「サイズ」リストの虫眼鏡ボタンの要素を取得
        const sizeList = document.querySelector('[field-id="サイズ"] .kb-field-value.kb-list');
        
        // イベントリスナーを追加して絞り込み
        if (typeDropdown && sizeList) {
          typeDropdown.addEventListener('change', (event) => {
            const selectedType = event.target.value; // 「種類」で選ばれた値
        
            // サイズリストをフィルタリング（以下はサンプル）
            const filteredSizes = getFilteredSizes(selectedType); // 絞り込んだサイズを取得する関数
            updateSizeList(sizeList, filteredSizes); // サイズリストを更新する関数
          });
        } else {
          console.error('対象の要素が見つかりませんでした！');
        }
        
        // サンプル関数：フィルタリングされたサイズを取得
        function getFilteredSizes(type) {
          const sizeMap = {
            '保護着': ['S', 'M', 'L'],
            '作業服': ['XS', 'M', 'XL']
          };
          return sizeMap[type] || [];
        }
        
        // サンプル関数：サイズリストを更新
        function updateSizeList(listElement, sizes) {
          listElement.innerHTML = ''; // 既存のリストをクリア
          sizes.forEach(size => {
            const listItem = document.createElement('div');
            listItem.textContent = size;
            listElement.appendChild(listItem);
          });
        }
    }
    // 復号化関数
    function decrypt(encryptedText, password) {
        const parts = encryptedText.split(':'); // IVと暗号文を分割
        const iv = CryptoJS.enc.Hex.parse(parts[0]); // IVをHexからWordArrayに変換
        const ciphertext = CryptoJS.enc.Hex.parse(parts[1]); // 暗号文をHexからWordArrayに変換

        const key = CryptoJS.SHA256(password); // パスワードからキーを生成

        const decrypted = CryptoJS.AES.decrypt(
            { ciphertext: ciphertext },
            key,
            {
                iv: iv,
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            }
        );

        return decrypted.toString(CryptoJS.enc.Utf8); // UTF-8形式で復号化されたテキストを返す
    }
});
