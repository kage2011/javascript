window.addEventListener('load', function () {
    // 監視対象の要素を取得
    const targetElement = document.querySelector('body > div:nth-child(13)');

    if (targetElement) {
        // MutationObserverを設定
        const observer = new MutationObserver((mutationsList) => {
            mutationsList.forEach(mutation => {
                if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
                    const displayStyle = window.getComputedStyle(targetElement).display;
                    if (displayStyle === 'flex') {
                        console.log('displayがflexに変更されました！');
                        runAdditionalProcess(); // フィルタリング処理を実行
                    }
                }
            });
        });

        // オプション設定：style属性の変更を監視
        const config = { attributes: true, attributeFilter: ['style'] };
        observer.observe(targetElement, config);
    } else {
        console.error('対象の要素が見つかりませんでした！');
    }

    function runAdditionalProcess() {
        const typeDropdown = document.querySelector('[field-id="種類"] .kb-field-value.kb-dropdown > span');
        const sizeTable = document.querySelector('body > div:nth-child(13) > div > div:nth-child(1) > table > tbody');
        
        if (typeDropdown && sizeTable) {
            let selectedType = typeDropdown.textContent;
            selectedType = selectedType.split('（')[0].trim(); // '('の前を取得してトリム
            
            const rows = Array.from(sizeTable.querySelectorAll('tr'));
            rows.forEach(row => {
                const spanElement = row.querySelector('td > div > div > span');
                const spanText = spanElement ? spanElement.textContent : '';
                if (spanText.includes(selectedType)) {
                    row.style.display = ''; // 表示
                } else {
                    row.style.display = 'none'; // 非表示
                }
            });
        } else {
            console.error('「種類」のドロップダウンまたはテーブルが見つかりませんでした！');
        }
    }
});

